{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","onAdd","useState","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isTitleTouched","setIsTitleTouched","isImgUrlTouched","setIsImgUrlTouched","isImdbUrlTouched","setIsImdbUrlTouched","isImdIdTouched","setIsImdIdTouched","error","setError","onSubmitForm","check","every","el","newError","firstTouch","onSubmit","event","preventDefault","htmlFor","id","type","value","placeholder","onBlur","trim","length","onChange","target","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37b5d510.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\n\ntype NewMovieProps = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<NewMovieProps> = ({\n  onAdd,\n}) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const [isTitleTouched, setIsTitleTouched] = useState(false);\n  const [isImgUrlTouched, setIsImgUrlTouched] = useState(false);\n  const [isImdbUrlTouched, setIsImdbUrlTouched] = useState(false);\n  const [isImdIdTouched, setIsImdIdTouched] = useState(false);\n\n  const [error, setError] = useState({\n    title: false,\n    imgUrl: false,\n    imdbUrl: false,\n    imdbId: false,\n  });\n\n  const resetInputs = () => {\n    setTitle('');\n    setDescription('');\n    setImdbId('');\n    setImdbUrl('');\n    setImgUrl('');\n  };\n\n  const firstTouch = () => {\n    const newError = { ...error };\n\n    if (!isTitleTouched) {\n      newError.title = true;\n    }\n\n    if (!isImgUrlTouched) {\n      newError.imgUrl = true;\n    }\n\n    if (!isImdbUrlTouched) {\n      newError.imdbUrl = true;\n    }\n\n    if (!isImdIdTouched) {\n      newError.imdbId = true;\n    }\n\n    setError({ ...newError });\n  };\n\n  const onSubmitForm = (check: string[]) => {\n    if (check.every(el => el)) {\n      onAdd({\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      });\n      resetInputs();\n\n      return;\n    }\n\n    firstTouch();\n  };\n\n  return (\n    <form\n      className=\"sidebar__form\"\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        const check: string[] = [title, imgUrl, imgUrl, imdbId];\n\n        onSubmitForm(check);\n      }}\n    >\n      Put the form here\n      <label htmlFor=\"title\">\n        <input\n          id=\"title\"\n          type=\"text\"\n          value={title}\n          placeholder=\"title\"\n          onBlur={() => {\n            if (!title.trim().length) {\n              setError({ ...error, title: true });\n            }\n          }}\n          onChange={(event) => {\n            setTitle(event.target.value);\n            if (error.title) {\n              setError({ ...error, title: false });\n              setIsTitleTouched(false);\n            }\n          }}\n        />\n        {error.title && (\n          <p className=\"error\">\n            input Title\n          </p>\n        )}\n      </label>\n      <label htmlFor=\"description\">\n        <input\n          id=\"description\"\n          type=\"text\"\n          value={description}\n          placeholder=\"description\"\n          onChange={(event) => {\n            setDescription(event.target.value);\n          }}\n        />\n      </label>\n      <label htmlFor=\"imgUrl\">\n        <input\n          id=\"imgUrl\"\n          type=\"text\"\n          value={imgUrl}\n          placeholder=\"imgUrl\"\n          onBlur={() => {\n            if (!imgUrl.trim().length) {\n              setError({ ...error, imgUrl: true });\n            }\n          }}\n          onChange={(event) => {\n            setImgUrl(event.target.value);\n\n            if (error.imgUrl) {\n              setError({ ...error, imgUrl: false });\n              setIsImgUrlTouched(false);\n            }\n          }}\n        />\n        {error.imgUrl && (\n          <p className=\"error\">\n            input imgUrl\n          </p>\n        )}\n      </label>\n      <label htmlFor=\"imdbUrl\">\n        <input\n          id=\"imdbUrl\"\n          type=\"text\"\n          value={imdbUrl}\n          placeholder=\"imdbUrl\"\n          onBlur={() => {\n            if (!imdbUrl.trim().length) {\n              setError({ ...error, imdbUrl: true });\n            }\n          }}\n          onChange={(event) => {\n            setImdbUrl(event.target.value);\n\n            if (error.imdbUrl) {\n              setError({ ...error, imdbUrl: false });\n              setIsImdbUrlTouched(false);\n            }\n          }}\n        />\n        {error.imdbUrl && (\n          <p className=\"error\">\n            input imdb Url\n          </p>\n        )}\n      </label>\n      <label htmlFor=\"imbdId\">\n        <input\n          id=\"imdbId\"\n          type=\"text\"\n          value={imdbId}\n          placeholder=\"imdbId\"\n          onBlur={() => {\n            if (!imdbId.trim().length) {\n              setError({ ...error, imdbId: true });\n            }\n          }}\n          onChange={(event) => {\n            setImdbId(event.target.value);\n\n            if (error.imdbId) {\n              setError({ ...error, imdbId: false });\n              setIsImdIdTouched(false);\n            }\n          }}\n        />\n        {error.imdbId && (\n          <p className=\"error\">\n            input imdb Id\n          </p>\n        )}\n      </label>\n\n      <button type=\"submit\">\n        submit\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport const App: React.FC<State> = () => {\n  const [movies, setMovies] = useState([...moviesFromServer]);\n\n  const addMovie = (movie: Movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App movies={[]} />, document.getElementById('root'));\n"],"sourceRoot":""}